
Objects => In Python, everything is an object.

‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢

*** üîª  class üî∫

 class => User defined objects are created using the class keyword. 

‚ñ™Ô∏è The class is a blueprint that defines the nature of a future object. 

‚ñ™Ô∏è From classes we can construct instances. 

‚ñ™Ô∏è An instance is a specific object created from a particular class. 

‚ñ™Ô∏è An attribute is a characteristic of an object. 

‚ñ™Ô∏è A method is an operation we can perform with the object.

For example, we can create a class called Dog. 

An attribute of a dog may be its breed or its name, while a method of a dog may be defined by a .bark() method which returns a sound.


‚ñ™Ô∏èAttributes
The syntax for creating an attribute is:

self.attribute = something


‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢

*** üîª  The __init__( ) Function üî∫

    The __init__ function is a special method in Python classes. 
    
üî∫It is known as the constructor method and is called when an object of the class is created.

Here is an example of a class with an __init__ method:


class Dog:

    def __init__(self, name, age):
        self.name = name
        self.age = age


dog1 = Dog("Fido", 3)

print(dog1.name)  # Output: "Fido"
print(dog1.age)   # Output: 3


üî∫ The __init__ method has the self parameter, which is a reference to the object itself. 

üî∫ The object is passed to the self parameter automatically when an object is created. 

üî∫You can then use the self parameter to set attributes of the object, as shown in the example above.

The __init__ method is called automatically every time an object of the class is created, so it is a good place to put any code that you want to run when an object is created. 

This can include initializing variables, setting up data structures, and more.


‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢

 *** üîª An object method is a function that is associated with a particular object and is accessed using the dot  notation. üî∫

Methods are functions defined inside the body of a class. They are used to perform operations with the attributes of our objects. Methods are a key concept of the OOP paradigm. They are essential to dividing responsibilities in programming, especially in large applications.

You can basically think of methods as functions acting on an Object that take the Object itself into account through its self argument.


Here is an example of an object method:


class Dog:

    def __init__(self, name, age):
        self.name = name
        self.age = age

    def bark(self):
        print("Woof!")

‚ñ™Ô∏è dog1 = Dog("Fido", 3)

‚ñ™Ô∏è dog1.bark()  		# Output: "Woof!"

In this example, the bark method is an object method of the Dog class. 

‚ùóÔ∏è It is defined using the def keyword and is associated with the object using the self parameter. 

‚ùóÔ∏è The bark method can be called on an object of the Dog class using the dot notation => (e.g., dog1.bark() ).

Object methods are useful for encapsulating behavior that is specific to a particular object. 
They allow you to define the actions that an object can perform and the ways in which it can interact with other objects.



class Circle:
    ‚Ä£ pi = 3.14

    # Circle gets instantiated with a radius (default is 1)
    def __init__(self, radius=1):
        self.radius = radius 
        self.area = radius * radius * Circle.pi		=> reference to the class level attribute
        	# self.area = radius * radius * self.pi


    # Method for resetting Radius 
    def setRadius(self, new_radius):
        self.radius = new_radius
  ‚Ä£     self.area = new_radius * new_radius * self.pi
  		# self.area = new_radius * new_radius * Circle.pi 
        

    # Method for getting Circumference
    def getCircumference(self):
 ‚Ä£      return self.radius * self.pi * 2
		# return self.radius * Circle.pi * 2

c = Circle()

print('Radius is: ',c.radius)
print('Area is: ',c.area)
print('Circumference is: ',c.getCircumference())



‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢

*** üîª  The self Parameter  üî∫

The self parameter is a special parameter that is used to reference the current object in object-oriented programming. 

It is passed automatically to object methods when they are called, and it is used to access the object's attributes and methods.

Here is an example of a class with an object method that uses the self parameter:


class Dog:

    def __init__(self, name, age):
        self.name = name
        self.age = age
        

    def bark(self):
        print("Woof!")
        

dog1 = Dog("Fido", 3)

dog1.bark()  # Output: "Woof!"

‚ñ™Ô∏è In this example, the bark method is an object method of the Dog class. It is defined using the def keyword and is associated with the object using the self parameter. 

‚ñ™Ô∏èThe self parameter is passed automatically when the bark method is called on an object of the Dog class (e.g., dog1.bark()).

‚ñ™Ô∏è The self parameter is useful for accessing the object's attributes and methods within the object method. 

For example, you can use the self parameter to access the name and age attributes of the Dog object, like this:


class Dog:

	# Class Object Attribute		=> same for any instance of a class
‚Ä£	species = 'mammal'

    def __init__(self, name, age):
        self.name = name
        self.age = age


	# Operations / Actions => Methods
‚ñ™Ô∏è    def bark(self):
 ‚Ä£     	    print(f"{self.name} says Woof!")
        	    

dog1 = Dog("Fido", 3)

dog1.bark()  # Output: "Fido says Woof!"


‚ñ™Ô∏è In this example, the bark method uses the self parameter to access the name attribute of the Dog object and prints a message using the object's name.



‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢

*** üîª Inheritance  üî∫

‚ñ™Ô∏è  Inheritance is a way to create a new class that is a modified version of an existing class. 
		‚àö Inheritance allows us to define a class that inherits all the methods and properties from another class.

‚ñ™Ô∏è Parent class is the class being inherited from, also called base class.

‚ñ™Ô∏è Child class is the class that inherits from another class, also called derived class.
		‚àö The new class is called the derived class, and the existing class is the base class. 

‚ñ™Ô∏è The derived class inherits attributes and behaviors from the base class, and can also have additional attributes and behaviors of its own.




class BaseClass:

    def __init__(self, value):
        self.value = value



class DerivedClass(BaseClass):

    def __init__(self, value, extra_value):
‚Ä£       super().__init__(value)
        self.extra_value = extra_value
        
        
In this example, the DerivedClass is a derived class that inherits from the BaseClass. 

It has an additional attribute called extra_value, in addition to the value attribute inherited from the BaseClass. 

‚ñ™Ô∏è super() function that will make the child class inherit all the methods and properties from its parent


You can then create an instance of the DerivedClass and access both the inherited value attribute and the additional extra_value attribute:


obj = DerivedClass(10, 20)

print(obj.value)  # prints 10
print(obj.extra_value)  # prints 20


Inheritance is a powerful feature of object-oriented programming that allows you to create a new class that is a modified version of an existing class, without having to modify the existing class itself. 

This can help you to reuse code and avoid duplication of effort.


‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢

***üîª  –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è üî∫


–ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è - —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –û–û–ü (–æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è). 

‚ñ™Ô∏è –û–Ω–∞ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–æ–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ –∫–ª–∞—Å—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ –∫–ª–∞—Å—Å–∞.

‚ñ™Ô∏è –í Python, –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –∏ –º–µ—Ç–æ–¥–æ–≤. 

‚ñ™Ô∏è –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –¥–≤—É—Ö –Ω–∏–∂–Ω–∏—Ö –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π (__). 

‚ñ™Ô∏è –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑–≤–Ω–µ –∫–ª–∞—Å—Å–∞, –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω—ã —Å –ø–æ–º–æ—â—å—é –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤.

–ù–∞–ø—Ä–∏–º–µ—Ä:

class MyClass:

    def __init__(self):
        self.__private_property = "I am private"
        
    
    def __private_method(self):
        print("I am a private method")
        
    
    def public_method(self):
        print(self.__private_property)
‚Ä£       self.__private_method()


obj = MyClass()

print(obj.__private_property)  # AttributeError: 'MyClass' object has no attribute '__private_property'

obj.__private_method()  # AttributeError: 'MyClass' object has no attribute '__private_method'

obj.public_method()  # prints "I am private" and "I am a private method"




class MyClass:

    def __init__(self):
        self.__private_property = "I am private"
    
    
    def __private_method(self):
        print("I am a private method")
        
    
    def public_method(self):
        print(self.__private_property)
        self.__private_method()
        

obj = MyClass()

print(obj.__private_property) 	 # AttributeError: 'MyClass' object has no attribute '__private_property'

obj.__private_method()  			# AttributeError: 'MyClass' object has no attribute '__private_method'

obj.public_method()  				# prints "I am private" and "I am a private method"




‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢

***üîª –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º üî∫


–ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º - —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –û–û–ü (–æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è). 

‚ñ™Ô∏è –û–Ω –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ –∫–ª–∞—Å—Å–∞–º–∏, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–∞–ª–∏–∑—É–µ—Ç —ç—Ç–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ-—Å–≤–æ–µ–º—É. –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ –∫–ª–∞—Å—Å–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.

‚ñ™Ô∏è –í Python, –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö –±–∞–∑–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.

	‚àö –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –º–µ—Ç–æ–¥–æ–≤.
	
	
‚ñ™Ô∏è –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–¥–Ω–æ–º—É –∫–ª–∞—Å—Å—É (–Ω–∞–∑—ã–≤–∞–µ–º–æ–º—É –ø–æ—Ç–æ–º–∫–æ–º) –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã –¥—Ä—É–≥–æ–≥–æ –∫–ª–∞—Å—Å–∞ (–Ω–∞–∑—ã–≤–∞–µ–º–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–º). 

‚ñ™Ô∏è –ü–æ—Ç–æ–º–æ–∫ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏–ª–∏ —Ä–∞—Å—à–∏—Ä—è—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤.

‚ñ™Ô∏è –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –º–µ—Ç–æ–¥–æ–≤ - —ç—Ç–æ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–¥–Ω–æ–º—É –º–µ—Ç–æ–¥—É –∏–º–µ—Ç—å —Ä–∞–∑–ª–∏—á–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –ø—Ä–∏–Ω–∏–º–∞–µ—Ç.


–ù–∞–ø—Ä–∏–º–µ—Ä:


class Animal:
    def speak(self):
        raise NotImplementedError("Subclass must implement this method")
        

class Dog(Animal):
    def speak(self):
        print("Woof!")
        

class Cat(Animal):
    def speak(self):
        print("Meow!")
        

animals = [Dog(), Cat()]

for animal in animals:
    animal.speak()


# Output:
# Woof!
# Meow!

–í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –∫–ª–∞—Å—Å Animal —è–≤–ª—è–µ—Ç—Å—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º –±–∞–∑–æ–≤—ã–º –∫–ª–∞—Å—Å–æ–º, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ speak, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö. –ö–ª–∞—Å—Å—ã Dog –∏ Cat —è–≤–ª—è—é—Ç—Å—è –ø–æ–¥–∫–ª–∞—Å—Å–∞–º–∏ Animal –∏ —Ä–µ–∞–ª–∏–∑—É—é—Ç –º–µ—Ç–æ–¥ speak –ø–æ-—Å–≤–æ–µ–º—É.




from abc import ABC, abstractmethod

class Shape(ABC):

    @abstractmethod
    def area(self):
        pass


class Rectangle(Shape):

    def __init__(self, width, height):
        self.width = width
        self.height = height
    
    def area(self):
        return self.width * self.height
        

class Circle(Shape):

    def __init__(self, radius):
        self.radius = radius
    
    def area(self):
        return 3.14 * self.radius ** 2
        

shapes = [Rectangle(10, 20), Circle(5)]

for shape in shapes:
    print(shape.area())  # prints 200 and 78.5


–í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –∫–ª–∞—Å—Å Shape —è–≤–ª—è–µ—Ç—Å—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º –±–∞–∑–æ–≤—ã–º –∫–ª–∞—Å—Å–æ–º, –∞ –∫–ª–∞—Å—Å—ã Rectangle –∏ Circle —è–≤–ª—è—é—Ç—Å—è –µ–≥–æ –ø–æ—Ç–æ–º–∫–∞–º–∏. –û–±–∞ –∫–ª–∞—Å—Å–∞ —Ä–µ–∞–ª–∏–∑—É—é—Ç –º–µ—Ç–æ–¥ area, –Ω–æ —É –Ω–∏—Ö —Ä–∞–∑–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞.



üî∫ –í —á–µ–º –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–∏–Ω—Ü–∏–ø –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞?

–ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º - –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –≤—ã–∑–æ–≤–æ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–ª–∞—Å—Å–∞-—Ä–æ–¥–∏—Ç–µ–ª—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–º—É –∫–ª–∞—Å—Å—É-–ø–æ—Ç–æ–º–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Å—Å—ã–ª–∞–µ—Ç—Å—è —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è.



‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢ ‚ñ™Ô∏è

***üîª –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ üî∫

–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ—Ç –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤, –æ–±—ã—á–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–π-—á–ª–µ–Ω–æ–≤. 

–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç —Ç–æ, —á—Ç–æ –¥–æ—á–µ—Ä–Ω–∏–π –∫–ª–∞—Å—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞, –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∏—Ö –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –¥–æ—á–µ—Ä–Ω–µ–º.

class Animal:
    def __init__(self, name):
        self.name = name
    
    def speak(self):
        print("I am an animal")

class Predator:
    def __init__(self):
        self.prey = []
    
    def hunt(self, prey):
        self.prey.append(prey)

class Lion(Animal, Predator):
    def speak(self):
        print("Roar!")

lion = Lion("Simba")
lion.speak()  # prints "Roar!"
lion.hunt("gazelle")
print(lion.prey)  # prints ["gazelle"]


–í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –∫–ª–∞—Å—Å Lion –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç –∫–ª–∞—Å—Å–æ–≤ Animal –∏ Predator, –∏ –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ –º–µ—Ç–æ–¥—ã –æ–±–æ–∏—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π. –¢–∞–∫–∂–µ –æ–Ω –º–æ–∂–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –º–µ—Ç–æ–¥–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª–µ–π, —Ç–∞–∫ –∫–∞–∫ –∏–º–µ–µ—Ç —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –º–µ—Ç–æ–¥–∞ speak.



‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢


*** üîª  Parameters & Arguments üî∫

üîª In Python, parameters are variables that are defined in the function definition and receive values when the function is called. 

üî∫ Arguments are the values that are passed to the function when it is called.

Here is an example of a function with parameters:


def greet(name, greeting):
    print(f"{greeting}, {name}!")

In this example, name and greeting are the parameters of the greet function. When the function is called, the values passed to it are known as arguments.


For example, when we call the function like this:


greet("Alice", "Hello")

The string "Alice" is the argument for the name parameter and the string "Hello" is the argument for the greeting parameter.

üî∫ So, to summarize: parameters are the variables defined in the function definition, and arguments are the values passed to the function when it is called.


‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢

***üîª Setting type attributes üî∫

You can set attributes (i.e., variables associated with an object) on an object by simply assigning a value to a variable with the same name as the attribute you want to set. For example:


class MyClass:
    def __init__(self):
        self.attribute = 0
        

obj = MyClass()
obj.attribute = 10

print(obj.attribute)  # Output: 10


‚ñ™Ô∏è In the example above, obj is an instance of the MyClass class, and attribute is an attribute of the obj object. 
We set the value of attribute to 10 using the assignment operator (=).

‚ñ™Ô∏è You can also set attributes on an object using the setattr function, which takes the object, the attribute name, and the value as arguments. For example:


‚ñ™Ô∏è setattr(obj, "attribute", 10) 		=>

This is equivalent to the previous example where we set the attribute using the assignment operator.


üîª It's important to note that in Python, attributes are not the same as class variables. 


üîª Class variables are variables that are shared among all instances of a class, whereas attributes are specific to each individual instance of a class. For example:


class MyClass:
    class_variable = 0

    def __init__(self):
        self.attribute = 0
        

obj1 = MyClass()
obj2 = MyClass()

obj1.attribute = 10
obj2.attribute = 20

print(obj1.attribute)  						# Output: 10
print(obj2.attribute)  						# Output: 20

print(MyClass.class_variable)  		# Output: 0

MyClass.class_variable = 30

print(MyClass.class_variable)  		# Output: 30

print(obj1.class_variable)  				# Output: 30

print(obj2.class_variable)  				# Output: 30


In the example above, obj1 and obj2 are both instances of the MyClass class.
 
We set the value of the attribute attribute for each object individually, so the values of obj1.attribute and obj2.attribute are different. On the other hand, the class_variable class variable is shared among all instances of the MyClass class, so setting the value of MyClass.class_variable affects the value of obj1.class_variable and obj2.class_variable.



‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢   ‚û¢

***üîª  üî∫